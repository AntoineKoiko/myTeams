Teams = fork de skype                                          Antoine Couacault
Request for Comments: 9039                                        Arthur Jourdan
Category : Proposed Standard                                    Aurelien Joncour
                                                                        May 2021


                    MYTEAMS PACKET TRANSFER PROTOCOL

Status of this Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.

Abstract

   This memo specifies the creation of MTPTP (myteams packet transfer protocol),
   that is a new standard for packet transfer management, specially designed to
   send and receive ascii data.

Table of contents
    1.Client request
    2.Server response
    3.Server reply code
    4.Content of data element

    .Authors' Addresses

1.Client request

    When a client write a command in the teams cli, a packet is created

    Packet:
        header:
            [SIZE_T] The packet size writed on 8 bytes (The size of the packet size variable is exclude)
            [CHAR]  The command code writed on 1 bytes
        content:
            [STRING] each args is writed as a string and separated by NULL BYTES

Command code list:

    Command       | Code
    ======================
    /login        |   1
    /logout       |   2
    /users        |   3
    /user         |   4
    /send         |   5
    /msgs         |   6
    /subscribe    |   7
    /subscribed   |   8
    /unsubscribe  |   9
    /use          |  10
    /create       |  11
    /list         |  12
    /info         |  13
    ======================

2.Server response

    After a client request the server create a packet and send it to the client

    Packet
        header:
            [SIZE_T] The packet size writed on 8 bytes (The size of the packet size variable is exclude)
            [INT]   The response code writed on 4 bytes (Read the "Server reply Code" section for more information)
        Content:
            [DATATYPE] Each element inside a custom datatype is separated by a NULL character (Read the "Content of data element" section for more information)

3.Server reply Code
    2XX             Succes

        21X         Single element

        22X         List of elements

        23X         Element successfuly created

        24X         Event received about other users actions

            2X1         user

            2X2         team

            2X3         channel

            2X4         thread

            2X5         replies

            2X6         msg

        25X         Special event (the decimal number is not related to the element type)

            251     User succesfuly subscribed to a teams

            252     User succesfuly unsubscribed to a teams

            253     User logged in

            254     User logged out

    4XX             Error

    4X1             Unauthorized (the user is not authorized to do the action, probably he is not subscribed)

        41X         User ask for an unknonw element

            411         Unknown user

            412         Unknown team

            413         Unknown channel

            414         Unknown thread


4.Content of data element:

Standart element:

[uuid]: 16 bytes (representing the Universally unique identifier)
[string]: ASCII character encoded in decimal and ending with a null character
[int]: A number represented in 4 bytes

header:
    [int]       rfc request code
    [size_t]    packet size

user:
    [uuid]      user_uuid
    [string]    user_name
    [int]       user_status (0 = not connected, 1 = connected)

team:
    [uuid]      team_uuid
    [uuid]      team_creator
    [string]    team_name
    [string]    team_description

channel:
    [uuid]      channel_uuid
    [uuid]      team_uuid
    [string]    channel_name
    [string]    channel_description

thread:
    [uuid]      thread_uuid
    [uuid]      channel_uuid
    [uuid]      user_uuid
    [time_t]    thread_timestamp
    [string]    thread_title
    [string]    thread_body

reply:
    [uuid]      reply_uuid
    [uuid]      team_uuid
    [uuid]      thread_uuid
    [time_t]    reply_timestamp
    [string]    reply_body
    [uuid]      user_uuid

msg:
    [uuid]      sender_uuid
    [uuid]      receiver_uuid
    [time_t]    msg_timestamp
    [string]    msg_body


.Authors' Addresses

{Epitech}
19-22 Boulevard Saint Conweion, 35000 Rennes

Antoine Couacault
Email: antoine.couacault@epitech.eu

Arthur Jourdan
Email: arthur.jourdan@epitech.eu

Aurelien Joncour
Email: aurelien.joncour@epitech.eu

